# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'menu2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QPropertyAnimation, QPoint, QTimer, pyqtSlot, QThread
from PyQt5.QtGui import QPixmap
from PyQt5 import QtTest
from PyQt5.QtWidgets import QApplication

import blackjack
from login import Ui_LoginDialog
from manage2 import Ui_Dialog
import threading
import math
from numpy import random
import blackjack
from utils import *


class Ui_MainWindow(object):
    def __init__(self):
        self.loggedUsers = []
        for i in range(5):
            self.loggedUsers.append(LoggedUser())

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1259, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1259, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1259, 720))
        MainWindow.setStyleSheet("QWidget{\n"
                                 "    background: #6B5596;\n"
                                 "}\n"
                                 "QLineEdit {\n"
                                 "    border: 2px solid gray;\n"
                                 "    border-radius: 10px;\n"
                                 "    padding: 0 8px;\n"
                                 "    background: #CFC1D0;\n"
                                 "}\n"
                                 "QLabel {\n"
                                 "    color: #FEFE58;\n"
                                 "}\n"
                                 "QPushButton{\n"
                                 "    border-style: solid;\n"
                                 "    border-color: #050a0e;\n"
                                 "    border-width: 1px;\n"
                                 "    border-radius: 5px;\n"
                                 "    color: #FEFE58;\n"
                                 "    padding: 2px;\n"
                                 "    background-color: #100E19;\n"
                                 "}\n"
                                 "QPushButton::default{\n"
                                 "    border-style: solid;\n"
                                 "    border-color: #050a0e;\n"
                                 "    border-width: 1px;\n"
                                 "    border-radius: 5px;\n"
                                 "    color: #FEFE58;\n"
                                 "    padding: 2px;\n"
                                 "    background-color: #151a1e;\n"
                                 "}\n"
                                 "QPushButton:hover{\n"
                                 "    border-style: solid;\n"
                                 "    border-top-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #C0DB50, stop:0.4 #C0DB50, stop:0.5 #100E19, stop:1 #100E19);\n"
                                 "    border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #100E19, stop:0.5 #100E19, stop:0.6 #C0DB50, stop:1 #C0DB50);\n"
                                 "    border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #C0DB50, stop:0.3 #C0DB50, stop:0.7 #100E19, stop:1 #100E19);\n"
                                 "    border-right-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #C0DB50, stop:0.3 #C0DB50, stop:0.7 #100E19, stop:1 #100E19);\n"
                                 "    border-width: 2px;\n"
                                 "    border-radius: 1px;\n"
                                 "    color: #FEFE58;\n"
                                 "    padding: 2px;\n"
                                 "}\n"
                                 "QPushButton:pressed{\n"
                                 "    border-style: solid;\n"
                                 "    border-top-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #d33af1, stop:0.4 #d33af1, stop:0.5 #100E19, stop:1 #100E19);\n"
                                 "    border-bottom-color: qlineargradient(spread:pad, x1:0, y1:1, x2:1, y2:1, stop:0 #100E19, stop:0.5 #100E19, stop:0.6 #d33af1, stop:1 #d33af1);\n"
                                 "    border-left-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #d33af1, stop:0.3 #d33af1, stop:0.7 #100E19, stop:1 #100E19);\n"
                                 "    border-right-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d33af1, stop:0.3 #d33af1, stop:0.7 #100E19, stop:1 #100E19);\n"
                                 "    border-width: 2px;\n"
                                 "    border-radius: 1px;\n"
                                 "    color: #FEFE58;\n"
                                 "    padding: 2px;\n"
                                 "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setObjectName("stackedWidget")
        self.mainMenuPage = QtWidgets.QWidget()
        self.mainMenuPage.setObjectName("mainMenuPage")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.mainMenuPage)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(790, 390, 251, 111))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_1 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_1.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_1.setObjectName("verticalLayout_1")
        self.playButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.playButton.sizePolicy().hasHeightForWidth())
        self.playButton.setSizePolicy(sizePolicy)
        self.playButton.setObjectName("playButton")
        self.verticalLayout_1.addWidget(self.playButton)
        self.rankButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rankButton.sizePolicy().hasHeightForWidth())
        self.rankButton.setSizePolicy(sizePolicy)
        self.rankButton.setObjectName("rankButton")
        self.verticalLayout_1.addWidget(self.rankButton)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.mainMenuPage)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 361, 701))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.userSW_1 = QtWidgets.QStackedWidget(self.verticalLayoutWidget_2)
        self.userSW_1.setObjectName("userSW_1")
        self.page1_1 = QtWidgets.QWidget()
        self.page1_1.setObjectName("page1_1")
        self.avatarUn_1 = QtWidgets.QLabel(self.page1_1)
        self.avatarUn_1.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.pixmapUn = QPixmap('images/avatars/default.png').scaled(61, 61)
        self.avatarUn_1.setPixmap(self.pixmapUn)
        self.avatarUn_1.setText("")
        self.avatarUn_1.setObjectName("avatarUn_1")
        self.loginButton_1 = QtWidgets.QPushButton(self.page1_1)
        self.loginButton_1.setGeometry(QtCore.QRect(130, 30, 75, 23))
        self.loginButton_1.setObjectName("loginButton_1")
        self.userSW_1.addWidget(self.page1_1)
        self.page2_1 = QtWidgets.QWidget()
        self.page2_1.setObjectName("page2_1")
        self.avatarKn_1 = QtWidgets.QLabel(self.page2_1)
        self.avatarKn_1.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarKn_1.setText("")
        self.avatarKn_1.setObjectName("avatarKn_1")
        self.username_1 = QtWidgets.QLabel(self.page2_1)
        self.username_1.setGeometry(QtCore.QRect(110, 10, 181, 21))
        self.username_1.setObjectName("username_1")
        self.manageButton_1 = QtWidgets.QPushButton(self.page2_1)
        self.manageButton_1.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.manageButton_1.setObjectName("manageButton_1")
        self.logoutButton_1 = QtWidgets.QPushButton(self.page2_1)
        self.logoutButton_1.setGeometry(QtCore.QRect(230, 40, 75, 23))
        self.logoutButton_1.setObjectName("logoutButton_1")
        self.userSW_1.addWidget(self.page2_1)
        self.verticalLayout_3.addWidget(self.userSW_1)
        self.userSW_2 = QtWidgets.QStackedWidget(self.verticalLayoutWidget_2)
        self.userSW_2.setObjectName("userSW_2")
        self.page1_2 = QtWidgets.QWidget()
        self.page1_2.setObjectName("page1_2")
        self.avatarUn_2 = QtWidgets.QLabel(self.page1_2)
        self.avatarUn_2.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarUn_2.setPixmap(self.pixmapUn)
        self.avatarUn_2.setText("")
        self.avatarUn_2.setObjectName("avatarUn_2")
        self.loginButton_2 = QtWidgets.QPushButton(self.page1_2)
        self.loginButton_2.setGeometry(QtCore.QRect(130, 30, 75, 23))
        self.loginButton_2.setObjectName("loginButton_2")
        self.userSW_2.addWidget(self.page1_2)
        self.page2_2 = QtWidgets.QWidget()
        self.page2_2.setObjectName("page2_2")
        self.avatarKn_2 = QtWidgets.QLabel(self.page2_2)
        self.avatarKn_2.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarKn_2.setText("")
        self.avatarKn_2.setObjectName("avatarKn_2")
        self.username_2 = QtWidgets.QLabel(self.page2_2)
        self.username_2.setGeometry(QtCore.QRect(110, 10, 181, 21))
        self.username_2.setObjectName("username_2")
        self.manageButton_2 = QtWidgets.QPushButton(self.page2_2)
        self.manageButton_2.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.manageButton_2.setObjectName("manageButton_2")
        self.logoutButton_2 = QtWidgets.QPushButton(self.page2_2)
        self.logoutButton_2.setGeometry(QtCore.QRect(230, 40, 75, 23))
        self.logoutButton_2.setObjectName("logoutButton_2")
        self.userSW_2.addWidget(self.page2_2)
        self.verticalLayout_3.addWidget(self.userSW_2)
        self.userSW_3 = QtWidgets.QStackedWidget(self.verticalLayoutWidget_2)
        self.userSW_3.setObjectName("userSW_3")
        self.page1_3 = QtWidgets.QWidget()
        self.page1_3.setObjectName("page1_3")
        self.avatarUn_3 = QtWidgets.QLabel(self.page1_3)
        self.avatarUn_3.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarUn_3.setPixmap(self.pixmapUn)
        self.avatarUn_3.setText("")
        self.avatarUn_3.setObjectName("avatarUn_3")
        self.loginButton_3 = QtWidgets.QPushButton(self.page1_3)
        self.loginButton_3.setGeometry(QtCore.QRect(130, 30, 75, 23))
        self.loginButton_3.setObjectName("loginButton_3")
        self.userSW_3.addWidget(self.page1_3)
        self.page2_3 = QtWidgets.QWidget()
        self.page2_3.setObjectName("page2_3")
        self.avatarKn_3 = QtWidgets.QLabel(self.page2_3)
        self.avatarKn_3.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarKn_3.setText("")
        self.avatarKn_3.setObjectName("avatarKn_3")
        self.username_3 = QtWidgets.QLabel(self.page2_3)
        self.username_3.setGeometry(QtCore.QRect(110, 10, 181, 21))
        self.username_3.setObjectName("username_3")
        self.manageButton_3 = QtWidgets.QPushButton(self.page2_3)
        self.manageButton_3.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.manageButton_3.setObjectName("manageButton_3")
        self.logoutButton_3 = QtWidgets.QPushButton(self.page2_3)
        self.logoutButton_3.setGeometry(QtCore.QRect(230, 40, 75, 23))
        self.logoutButton_3.setObjectName("logoutButton_3")
        self.userSW_3.addWidget(self.page2_3)
        self.verticalLayout_3.addWidget(self.userSW_3)
        self.userSW_4 = QtWidgets.QStackedWidget(self.verticalLayoutWidget_2)
        self.userSW_4.setObjectName("userSW_4")
        self.page1_4 = QtWidgets.QWidget()
        self.page1_4.setObjectName("page1_4")
        self.avatarUn_4 = QtWidgets.QLabel(self.page1_4)
        self.avatarUn_4.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarUn_4.setPixmap(self.pixmapUn)
        self.avatarUn_4.setText("")
        self.avatarUn_4.setObjectName("avatarUn_4")
        self.loginButton_4 = QtWidgets.QPushButton(self.page1_4)
        self.loginButton_4.setGeometry(QtCore.QRect(130, 30, 75, 23))
        self.loginButton_4.setObjectName("loginButton_4")
        self.userSW_4.addWidget(self.page1_4)
        self.page2_4 = QtWidgets.QWidget()
        self.page2_4.setObjectName("page2_4")
        self.avatarKn_4 = QtWidgets.QLabel(self.page2_4)
        self.avatarKn_4.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarKn_4.setText("")
        self.avatarKn_4.setObjectName("avatarKn_4")
        self.username_4 = QtWidgets.QLabel(self.page2_4)
        self.username_4.setGeometry(QtCore.QRect(110, 10, 181, 21))
        self.username_4.setObjectName("username_4")
        self.manageButton_4 = QtWidgets.QPushButton(self.page2_4)
        self.manageButton_4.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.manageButton_4.setObjectName("manageButton_4")
        self.logoutButton_4 = QtWidgets.QPushButton(self.page2_4)
        self.logoutButton_4.setGeometry(QtCore.QRect(230, 40, 75, 23))
        self.logoutButton_4.setObjectName("logoutButton_4")
        self.userSW_4.addWidget(self.page2_4)
        self.verticalLayout_3.addWidget(self.userSW_4)
        self.userSW_5 = QtWidgets.QStackedWidget(self.verticalLayoutWidget_2)
        self.userSW_5.setObjectName("userSW_5")
        self.page1_5 = QtWidgets.QWidget()
        self.page1_5.setObjectName("page1_5")
        self.avatarUn_5 = QtWidgets.QLabel(self.page1_5)
        self.avatarUn_5.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarUn_5.setPixmap(self.pixmapUn)
        self.avatarUn_5.setText("")
        self.avatarUn_5.setObjectName("avatarUn_5")
        self.loginButton_5 = QtWidgets.QPushButton(self.page1_5)
        self.loginButton_5.setGeometry(QtCore.QRect(130, 30, 75, 23))
        self.loginButton_5.setObjectName("loginButton_5")
        self.userSW_5.addWidget(self.page1_5)
        self.page2_5 = QtWidgets.QWidget()
        self.page2_5.setObjectName("page2_5")
        self.avatarKn_5 = QtWidgets.QLabel(self.page2_5)
        self.avatarKn_5.setGeometry(QtCore.QRect(10, 10, 61, 61))
        self.avatarKn_5.setText("")
        self.avatarKn_5.setObjectName("avatarKn_5")
        self.username_5 = QtWidgets.QLabel(self.page2_5)
        self.username_5.setGeometry(QtCore.QRect(110, 10, 181, 21))
        self.username_5.setObjectName("username_5")
        self.manageButton_5 = QtWidgets.QPushButton(self.page2_5)
        self.manageButton_5.setGeometry(QtCore.QRect(110, 40, 75, 23))
        self.manageButton_5.setObjectName("manageButton_5")
        self.logoutButton_5 = QtWidgets.QPushButton(self.page2_5)
        self.logoutButton_5.setGeometry(QtCore.QRect(230, 40, 75, 23))
        self.logoutButton_5.setObjectName("logoutButton_5")
        self.userSW_5.addWidget(self.page2_5)
        self.verticalLayout_3.addWidget(self.userSW_5)
        self.tutorialButton = QtWidgets.QPushButton(self.mainMenuPage)
        self.tutorialButton.setGeometry(QtCore.QRect(1060, 0, 75, 23))
        self.tutorialButton.setObjectName("tutorialButton")
        self.tutorialButton.setText("TUTORIAL")
        self.adminPanelButton = QtWidgets.QPushButton(self.mainMenuPage)
        self.adminPanelButton.setGeometry(QtCore.QRect(1160, 0, 75, 23))
        self.adminPanelButton.setObjectName("adminPanelButton")
        self.stackedWidget.addWidget(self.mainMenuPage)

        # SETUP PAGE
        self.setupPage = QtWidgets.QWidget()
        self.setupPage.setObjectName("setupPage")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.setupPage)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 10, 751, 511))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.comboBox = ComboBoxUsers(self.loggedUsers, self.setupPage)
        self.startGameButton = QtWidgets.QPushButton(self.setupPage)
        self.startGameButton.setGeometry(QtCore.QRect(890, 570, 351, 121))
        self.startGameButton.setObjectName("startGameButton")
        self.backToMenuButton_1 = QtWidgets.QPushButton(self.setupPage)
        self.backToMenuButton_1.setGeometry(QtCore.QRect(10, 650, 131, 41))
        self.backToMenuButton_1.setObjectName("backToMenuButton_1")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.setupPage)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(780, 10, 451, 511))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_6.setSpacing(50)
        self.verticalLayout_6.setAlignment(Qt.AlignCenter)
        self.settingsLabel = QtWidgets.QLabel(self.setupPage)
        self.settingsLabel.setText("SETTINGS:")
        self.settingsLabel.setStyleSheet("font-size: 30px;color: #FEFE58; font-weight: bold;")
        self.verticalLayout_6.addWidget(self.settingsLabel)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(14)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.deck1rb = QtWidgets.QRadioButton()
        self.deck1rb.setObjectName("deck1rb")
        self.horizontalLayout_2.addWidget(self.deck1rb)
        self.deck2rb = QtWidgets.QRadioButton()
        self.deck2rb.setObjectName("deck2rb")
        self.horizontalLayout_2.addWidget(self.deck2rb)
        self.deck3rb = QtWidgets.QRadioButton()
        self.deck3rb.setObjectName("deck3rb")
        self.horizontalLayout_2.addWidget(self.deck3rb)
        self.deck1rb.setStyleSheet("QRadioButton {font-size: 20px;color: #FEFE58; font-weight: bold;}")
        self.deck2rb.setStyleSheet("QRadioButton {font-size: 20px;color: #FEFE58; font-weight: bold;}")
        self.deck3rb.setStyleSheet("QRadioButton {font-size: 20px;color: #FEFE58; font-weight: bold;}")
        self.verticalLayout_6.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSpacing(14)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.skin1rb = QtWidgets.QRadioButton()
        self.skin1rb.setObjectName("skin1rb")
        self.skin1rb.setStyleSheet("QRadioButton::indicator {"
                                   "width: 91px;"
                                   "height: 128px;"
                                   "image: url(images/cards/set1/heart_A)}"
                                   "QRadioButton::indicator::checked {"
                                   "width: 81px;"
                                   "height: 118px;"
                                   "border : 5px solid yellow;"
                                   "}")
        self.horizontalLayout_3.addWidget(self.skin1rb)
        self.skin2rb = QtWidgets.QRadioButton()
        self.skin2rb.setObjectName("skin2rb")
        self.skin2rb.setStyleSheet("QRadioButton::indicator {"
                                   "width: 91px;"
                                   "height: 128px;"
                                   "image: url(images/cards/set2/heart_A)}"
                                   "QRadioButton::indicator::checked {"
                                   "width: 81px;"
                                   "height: 118px;"
                                   "border : 5px solid yellow;"
                                   "}")
        self.horizontalLayout_3.addWidget(self.skin2rb)
        self.verticalLayout_6.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(14)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.timeSecondsLabel = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.timeSecondsLabel.setFont(font)
        self.timeSecondsLabel.setObjectName("timeSecondsLabel")
        self.timeSlider = QtWidgets.QSlider(self.verticalLayoutWidget_4)
        self.timeSlider.setOrientation(QtCore.Qt.Horizontal)
        self.timeSlider.setRange(5, 15)
        self.timeSlider.setObjectName("timeSlider")
        self.horizontalLayout_4.addWidget(self.timeSlider)
        self.timeSlider.valueChanged.connect(self.timeSliderFunction)
        self.timeSlider.setValue(10)
        self.horizontalLayout_4.addWidget(self.timeSecondsLabel)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.stackedWidget.addWidget(self.setupPage)

        # PLAY PAGE
        self.playPage = QtWidgets.QWidget()
        self.playPage.setObjectName("playPage")
        self.betLabel = QtWidgets.QLabel(self.playPage)
        self.betLabel.setGeometry(QtCore.QRect(700, 670, 100, 21))
        self.betLabel.setObjectName("betLabel")
        self.betLabel.setStyleSheet("font-size: 20px;color: #FEFE58; font-weight: bold;")
        self.betLabel.hide()
        self.betSlider = QtWidgets.QSlider(self.playPage)
        self.betSlider.setGeometry(QtCore.QRect(500, 670, 150, 21))
        self.betSlider.setOrientation(QtCore.Qt.Horizontal)
        self.betSlider.setObjectName("betSlider")
        self.betSlider.setRange(10, 500)
        self.betSlider.valueChanged.connect(self.betSliderFunction)
        self.betSlider.setValue(500)
        self.betButton = QtWidgets.QPushButton(self.playPage)
        self.betButton.setGeometry(QtCore.QRect(800, 670, 100, 30))
        self.betButton.setObjectName("betButton")
        self.hitButton = QtWidgets.QPushButton(self.playPage)
        self.hitButton.setGeometry(QtCore.QRect(950, 670, 100, 30))
        self.hitButton.setObjectName("hitButton")
        self.standButton = QtWidgets.QPushButton(self.playPage)
        self.standButton.setGeometry(QtCore.QRect(1100, 670, 100, 30))
        self.standButton.setObjectName("standButton")
        self.exitButton = QtWidgets.QPushButton(self.playPage)
        self.exitButton.setGeometry(QtCore.QRect(10, 670, 100, 30))
        self.exitButton.setObjectName("exitButton")
        self.tableImageLabel = QtWidgets.QLabel(self.playPage)
        self.tableImageLabel.setGeometry(QtCore.QRect(0, 0, 1240, 662))
        self.pixmapTable = QPixmap('images/others/table.jpg').scaled(1240, 672)
        self.tableImageLabel.setPixmap(self.pixmapTable)
        self.deckImageLabel = QtWidgets.QLabel(self.playPage)
        self.deckImageLabel.setGeometry(QtCore.QRect(580, 281, 80, 100))
        self.pixmapDeck = QPixmap('images/others/talia2_main.png').scaled(80, 100)
        self.deckImageLabel.setPixmap(self.pixmapDeck)
        self.tableImageLabel.setText("")
        self.tableImageLabel.setObjectName("tableImageLabel")
        self.tframe1 = QtWidgets.QFrame(self.playPage)
        self.tframe2 = QtWidgets.QFrame(self.playPage)
        self.tframe3 = QtWidgets.QFrame(self.playPage)
        self.tframe4 = QtWidgets.QFrame(self.playPage)
        self.tframe1.setObjectName("tframe1")
        self.tframe2.setObjectName("tframe2")
        self.tframe3.setObjectName("tframe3")
        self.tframe4.setObjectName("tframe4")
        self.tframe1.setGeometry(QtCore.QRect(1120, 20, 80, 40))
        self.tframe2.setGeometry(QtCore.QRect(1120, 70, 80, 40))
        self.tframe3.setGeometry(QtCore.QRect(1120, 120, 80, 40))
        self.tframe4.setGeometry(QtCore.QRect(1120, 170, 80, 40))
        self.tframe1.setStyleSheet(
            "#tframe1 {border: 5px solid #FEFE58; background-color: #CFABDB;} QLabel { font-size: 15px;color: #FEFE58; background-color: #CFABDB; font-weight: bold}")  # wait
        self.tframe2.setStyleSheet(
            "#tframe2 {border: 5px solid #78C1FF; background-color: #CFABDB;} QLabel { font-size: 15px;color: #FEFE58; background-color: #CFABDB; font-weight: bold}")  # turn
        self.tframe3.setStyleSheet(
            "#tframe3 {border: 5px solid #010508; background-color: #CFABDB;} QLabel { font-size: 15px;color: #FEFE58; background-color: #CFABDB; font-weight: bold}")  # lost
        self.tframe4.setStyleSheet(
            "#tframe4 {border: 5px solid #D70000; background-color: #CFABDB;} QLabel { font-size: 15px;color: #FEFE58; background-color: #CFABDB; font-weight: bold}")  # lost
        self.tframe1Label = QtWidgets.QLabel(self.tframe1)
        self.tframe2Label = QtWidgets.QLabel(self.tframe2)
        self.tframe3Label = QtWidgets.QLabel(self.tframe3)
        self.tframe4Label = QtWidgets.QLabel(self.tframe4)
        self.vbox1t = QtWidgets.QVBoxLayout()
        self.vbox2t = QtWidgets.QVBoxLayout()
        self.vbox3t = QtWidgets.QVBoxLayout()
        self.vbox4t = QtWidgets.QVBoxLayout()
        self.vbox1t.setAlignment(Qt.AlignCenter)
        self.vbox2t.setAlignment(Qt.AlignCenter)
        self.vbox3t.setAlignment(Qt.AlignCenter)
        self.vbox4t.setAlignment(Qt.AlignCenter)
        self.vbox1t.addWidget(self.tframe1Label)
        self.vbox2t.addWidget(self.tframe2Label)
        self.vbox3t.addWidget(self.tframe3Label)
        self.vbox4t.addWidget(self.tframe4Label)
        self.tframe1.setLayout(self.vbox1t)
        self.tframe2.setLayout(self.vbox2t)
        self.tframe3.setLayout(self.vbox3t)
        self.tframe4.setLayout(self.vbox4t)
        self.tframe1Label.setText("WAIT")
        self.tframe2Label.setText("TURN")
        self.tframe3Label.setText("LOST")
        self.tframe4Label.setText("WIN")
        self.replayButton = QtWidgets.QPushButton(self.playPage)
        self.replayButton.setGeometry(QtCore.QRect(110, 670, 100, 30))
        self.replayButton.setObjectName("replayButton")
        self.replayButton.setText("REPLAY")
        self.stackedWidget.addWidget(self.playPage)

        # RANKING PAGE
        self.rankingPage = QtWidgets.QWidget()
        self.rankingPage.setObjectName("rankingPage")
        self.rankingList = QtWidgets.QTableView(self.rankingPage)
        self.rankingList.setEditTriggers(QtWidgets.QTableView.NoEditTriggers)
        self.rankingList.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.rankingList.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.rankingList.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.rankingList.setGeometry(QtCore.QRect(40, 50, 1161, 621))
        self.rankingList.setObjectName("rankingList")
        self.rankingList.setFocusPolicy(Qt.NoFocus)
        self.rankingList.setStyleSheet(
            "QTableView {selection-color: black ;selection-background-color: #FFC30B; font-size: 13px;color: #FEFE58;}"
            "QHeaderView::section {color:white; background-color:#232326;}")
        self.label_4 = QtWidgets.QLabel(self.rankingPage)
        self.label_4.setGeometry(QtCore.QRect(570, 10, 101, 21))
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.backToMenuButton_2 = QtWidgets.QPushButton(self.rankingPage)
        self.backToMenuButton_2.setGeometry(QtCore.QRect(10, 680, 75, 23))
        self.backToMenuButton_2.setObjectName("backToMenuButton_2")
        self.statButton = QtWidgets.QPushButton(self.rankingPage)
        self.statButton.setGeometry(QtCore.QRect(500, 680, 241, 23))
        self.statButton.setObjectName("statButton")
        self.stackedWidget.addWidget(self.rankingPage)

        # ADMIN PAGE
        self.adminPage = QtWidgets.QWidget()
        self.adminPage.setObjectName("adminPage")
        self.backToMenuButton_3 = QtWidgets.QPushButton(self.adminPage)
        self.backToMenuButton_3.setGeometry(QtCore.QRect(10, 670, 75, 23))
        self.backToMenuButton_3.setObjectName("backToMenuButton_3")
        self.unbanButton = QtWidgets.QPushButton(self.adminPage)
        self.unbanButton.setGeometry(QtCore.QRect(720, 670, 75, 23))
        self.unbanButton.setObjectName("unbanButton")
        self.banButton = QtWidgets.QPushButton(self.adminPage)
        self.banButton.setGeometry(QtCore.QRect(850, 670, 75, 23))
        self.banButton.setObjectName("banButton")
        self.setUserButton = QtWidgets.QPushButton(self.adminPage)
        self.setUserButton.setGeometry(QtCore.QRect(980, 670, 75, 23))
        self.setUserButton.setObjectName("setUserButton")
        self.setAdminButton = QtWidgets.QPushButton(self.adminPage)
        self.setAdminButton.setGeometry(QtCore.QRect(1110, 670, 75, 23))
        self.setAdminButton.setObjectName("setAdminButton")
        self.adminList = QtWidgets.QTableView(self.adminPage)
        self.adminList.setGeometry(QtCore.QRect(30, 60, 1181, 591))
        self.adminList.setObjectName("adminList")
        self.adminList.setEditTriggers(QtWidgets.QTableView.NoEditTriggers)
        self.adminList.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.adminList.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.adminList.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.adminList.setStyleSheet(
            "QTableView {selection-color: black ;selection-background-color: #FFC30B; font-size: 13px;color: #FEFE58;}"
            "QHeaderView::section {color:white; background-color:#232326;}")
        self.label_6 = QtWidgets.QLabel(self.adminPage)
        self.label_6.setGeometry(QtCore.QRect(540, 0, 151, 51))
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.stackedWidget.addWidget(self.adminPage)

        # STATISTICS PAGE
        self.statisticsPage = QtWidgets.QWidget()
        self.statisticsPage.setObjectName("statisticsPage")
        self.gridLayoutWidget_6 = QtWidgets.QWidget(self.statisticsPage)
        self.gridLayoutWidget_6.setGeometry(QtCore.QRect(270, 90, 771, 611))
        self.gridLayoutWidget_6.setObjectName("gridLayoutWidget_6")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.gridLayoutWidget_6)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.stl_3 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_3.setObjectName("stl_3")
        self.gridLayout_6.addWidget(self.stl_3, 2, 0, 1, 1)
        self.st_16 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_16.setObjectName("st_16")
        self.gridLayout_6.addWidget(self.st_16, 16, 1, 1, 1)
        self.st_15 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_15.setObjectName("st_15")
        self.gridLayout_6.addWidget(self.st_15, 15, 1, 1, 1)
        self.stl_5 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_5.setObjectName("stl_5")
        self.gridLayout_6.addWidget(self.stl_5, 4, 0, 1, 1)
        self.st_5 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_5.setObjectName("st_5")
        self.gridLayout_6.addWidget(self.st_5, 4, 1, 1, 1)
        self.stl_11 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_11.setObjectName("stl_11")
        self.gridLayout_6.addWidget(self.stl_11, 11, 0, 1, 1)
        self.st_18 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_18.setObjectName("st_18")
        self.gridLayout_6.addWidget(self.st_18, 18, 1, 1, 1)
        self.st_9 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_9.setObjectName("st_9")
        self.gridLayout_6.addWidget(self.st_9, 9, 1, 1, 1)
        self.stl_10 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_10.setObjectName("stl_10")
        self.gridLayout_6.addWidget(self.stl_10, 10, 0, 1, 1)
        self.st_12 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_12.setObjectName("st_12")
        self.gridLayout_6.addWidget(self.st_12, 12, 1, 1, 1)
        self.st_14 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_14.setObjectName("st_14")
        self.gridLayout_6.addWidget(self.st_14, 14, 1, 1, 1)
        self.st_3 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_3.setObjectName("st_3")
        self.gridLayout_6.addWidget(self.st_3, 2, 1, 1, 1)
        self.stl_13 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_13.setObjectName("stl_13")
        self.gridLayout_6.addWidget(self.stl_13, 13, 0, 1, 1)
        self.stl_14 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_14.setObjectName("stl_14")
        self.gridLayout_6.addWidget(self.stl_14, 14, 0, 1, 1)
        self.st_1 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_1.setObjectName("st_1")
        self.gridLayout_6.addWidget(self.st_1, 0, 1, 1, 1)
        self.stl_4 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_4.setObjectName("stl_4")
        self.gridLayout_6.addWidget(self.stl_4, 3, 0, 1, 1)
        self.st_4 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_4.setObjectName("st_4")
        self.gridLayout_6.addWidget(self.st_4, 3, 1, 1, 1)
        self.stl_15 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_15.setObjectName("stl_15")
        self.gridLayout_6.addWidget(self.stl_15, 15, 0, 1, 1)
        self.stl_17 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_17.setObjectName("stl_17")
        self.gridLayout_6.addWidget(self.stl_17, 17, 0, 1, 1)
        self.stl_7 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_7.setObjectName("stl_7")
        self.gridLayout_6.addWidget(self.stl_7, 7, 0, 1, 1)
        self.stl_1 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_1.setObjectName("stl_1")
        self.gridLayout_6.addWidget(self.stl_1, 0, 0, 1, 1)
        self.stl_20 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_20.setObjectName("stl_20")
        self.gridLayout_6.addWidget(self.stl_20, 20, 0, 1, 1)
        self.st_7 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_7.setObjectName("st_7")
        self.gridLayout_6.addWidget(self.st_7, 7, 1, 1, 1)
        self.stl_12 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_12.setObjectName("stl_12")
        self.gridLayout_6.addWidget(self.stl_12, 12, 0, 1, 1)
        self.stl_19 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_19.setObjectName("stl_19")
        self.gridLayout_6.addWidget(self.stl_19, 19, 0, 1, 1)
        self.stl_9 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_9.setObjectName("stl_9")
        self.gridLayout_6.addWidget(self.stl_9, 9, 0, 1, 1)
        self.stl_16 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_16.setObjectName("stl_16")
        self.gridLayout_6.addWidget(self.stl_16, 16, 0, 1, 1)
        self.stl_8 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_8.setObjectName("stl_8")
        self.gridLayout_6.addWidget(self.stl_8, 8, 0, 1, 1)
        self.st_13 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_13.setObjectName("st_13")
        self.gridLayout_6.addWidget(self.st_13, 13, 1, 1, 1)
        self.st_8 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_8.setObjectName("st_8")
        self.gridLayout_6.addWidget(self.st_8, 8, 1, 1, 1)
        self.st_2 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_2.setObjectName("st_2")
        self.gridLayout_6.addWidget(self.st_2, 1, 1, 1, 1)
        self.stl_2 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_2.setObjectName("stl_2")
        self.gridLayout_6.addWidget(self.stl_2, 1, 0, 1, 1)
        self.stl_18 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_18.setObjectName("stl_18")
        self.gridLayout_6.addWidget(self.stl_18, 18, 0, 1, 1)
        self.st_10 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_10.setObjectName("st_10")
        self.gridLayout_6.addWidget(self.st_10, 10, 1, 1, 1)
        self.st_20 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_20.setObjectName("st_20")
        self.gridLayout_6.addWidget(self.st_20, 20, 1, 1, 1)
        self.st_11 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_11.setObjectName("st_11")
        self.gridLayout_6.addWidget(self.st_11, 11, 1, 1, 1)
        self.st_19 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_19.setObjectName("st_19")
        self.gridLayout_6.addWidget(self.st_19, 19, 1, 1, 1)
        self.st_17 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_17.setObjectName("st_17")
        self.gridLayout_6.addWidget(self.st_17, 17, 1, 1, 1)
        self.stl_6 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.stl_6.setObjectName("stl_6")
        self.gridLayout_6.addWidget(self.stl_6, 5, 0, 1, 1)
        self.st_6 = QtWidgets.QLabel(self.gridLayoutWidget_6)
        self.st_6.setObjectName("st_6")
        self.gridLayout_6.addWidget(self.st_6, 5, 1, 1, 1)
        self.statAvatar = QtWidgets.QLabel(self.statisticsPage)
        self.statAvatar.setGeometry(QtCore.QRect(1039, 50, 100, 100))
        self.statAbout = QtWidgets.QLabel(self.statisticsPage)
        self.statAbout.setGeometry(QtCore.QRect(939, 200, 300, 400))
        self.statAbout.setStyleSheet(
            "QLabel { font-size: 13px;color: #FEFE58; font-weight: bold;border: 2px solid gray;border-radius: 10px;}")
        self.statAbout.setAlignment(Qt.AlignCenter)
        self.statAbout.setWordWrap(True)
        self.userStatLabel = QtWidgets.QLabel(self.statisticsPage)
        self.userStatLabel.setGeometry(QtCore.QRect(280, 30, 391, 41))
        self.userStatLabel.setFont(font)
        self.userStatLabel.setObjectName("userStatLabel")
        self.backToRankButton = QtWidgets.QPushButton(self.statisticsPage)
        self.backToRankButton.setGeometry(QtCore.QRect(10, 680, 75, 23))
        self.backToRankButton.setObjectName("backToRankButton")
        self.stackedWidget.addWidget(self.statisticsPage)
        self.horizontalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        # TUTORIAL PAGE
        self.tutorialPage = QtWidgets.QWidget()
        self.tutorialPage.setObjectName("tutorialPage")
        self.backToMenuButton_4 = QtWidgets.QPushButton(self.tutorialPage)
        self.backToMenuButton_4.setGeometry(QtCore.QRect(10, 670, 75, 23))
        self.backToMenuButton_4.setObjectName("backToMenuButton_4")
        self.tutorial = QtWidgets.QLabel(self.tutorialPage)
        self.tutorial.setText("Welcome in blackjack game ! (polish: oczko)\n"
                              "\n\n USERS \n"
                              "In the right panel you might see five places where you can login or create a new account to play this lovely game.\n"
                              "If you login properly, you are allowed to change your account features like avatar, description or password. \n"
                              "You may look to the ranking subpage (it sorts players according to the money) or even get \n"
                              "to know with users statistics in much deeper way by clicking show statistics! \n"
                              "In the right corner of the main panel, you can see admin button,\n"
                              "where admin is allowed to manage players (ban or unban) and also to set new admins or degrade them.\n"
                              "\n\n SETUP GAME \n"
                              "If you click play button you will be redirected to the page with a few game options. \n"
                              "You can choose your opponents or play with computer algorithm with specified level of intelligence (easy, medium, hard).\n"
                              "You can also change number of decks, and layout of your cards. After selecting at least two players (max 5) you might begin your adventure and play blackjack !\n"
                              "\n\n GAMEPLAY \n"
                              "At the beginning initial phase of bet is happening, you receive specified amount of money to play with. \n"
                              "Remember, it will be added or taken from your overall money amount at the end of the game (depending on the result).\n"
                              "After that phase, game rules are pretty simple, you take the card with particular value and it is added to your result, \n"
                              "you might pass or take another card but your goal\n"
                              "is to get as close as possible to 21. If you go beyond that, you will lose.\n"
                              "\n"
                              "Good luck ! \n")
        self.tutorial.setStyleSheet(
            "QLabel { font-size: 15px;color: #FEFE58; font-weight: bold;border: 2px solid gray;border-radius: 10px;}")
        self.tutorial.setAlignment(Qt.AlignCenter)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tutorialPage)
        self.verticalLayout_7.addWidget(self.tutorial)
        self.verticalLayout_7.setAlignment(Qt.AlignCenter)
        self.tutorialPage.setLayout(self.verticalLayout_7)
        self.stackedWidget.addWidget(self.tutorialPage)

        # START SETTINGS
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.userSW_1.setCurrentIndex(0)
        self.userSW_2.setCurrentIndex(0)
        self.userSW_3.setCurrentIndex(0)
        self.userSW_4.setCurrentIndex(0)
        self.userSW_5.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.deckNumberGroup = QtWidgets.QButtonGroup()
        self.deckSkinGroup = QtWidgets.QButtonGroup()

        self.deckNumberGroup.addButton(self.deck1rb)
        self.deckNumberGroup.addButton(self.deck2rb)
        self.deckNumberGroup.addButton(self.deck3rb)

        self.deck1rb.setChecked(True)
        self.deckSkinGroup.addButton(self.skin1rb)
        self.deckSkinGroup.addButton(self.skin2rb)
        self.skin1rb.setChecked(True)

        # BUTTONS FUNCTIONS
        self.loginButton_1.clicked.connect(
            lambda: self.openLoginDialog(0, self.userSW_1, self.username_1, self.avatarKn_1))
        self.loginButton_2.clicked.connect(
            lambda: self.openLoginDialog(1, self.userSW_2, self.username_2, self.avatarKn_2))
        self.loginButton_3.clicked.connect(
            lambda: self.openLoginDialog(2, self.userSW_3, self.username_3, self.avatarKn_3))
        self.loginButton_4.clicked.connect(
            lambda: self.openLoginDialog(3, self.userSW_4, self.username_4, self.avatarKn_4))
        self.loginButton_5.clicked.connect(
            lambda: self.openLoginDialog(4, self.userSW_5, self.username_5, self.avatarKn_5))

        self.manageButton_1.clicked.connect(lambda: self.openManageDialog(self.loggedUsers[0], self.avatarKn_1))
        self.manageButton_2.clicked.connect(lambda: self.openManageDialog(self.loggedUsers[1], self.avatarKn_2))
        self.manageButton_3.clicked.connect(lambda: self.openManageDialog(self.loggedUsers[2], self.avatarKn_3))
        self.manageButton_4.clicked.connect(lambda: self.openManageDialog(self.loggedUsers[3], self.avatarKn_4))
        self.manageButton_5.clicked.connect(lambda: self.openManageDialog(self.loggedUsers[4], self.avatarKn_5))

        self.logoutButton_1.clicked.connect(lambda: self.logout(0, self.userSW_1))
        self.logoutButton_2.clicked.connect(lambda: self.logout(1, self.userSW_2))
        self.logoutButton_3.clicked.connect(lambda: self.logout(2, self.userSW_3))
        self.logoutButton_4.clicked.connect(lambda: self.logout(3, self.userSW_4))
        self.logoutButton_5.clicked.connect(lambda: self.logout(4, self.userSW_5))

        self.backToRankButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.rankingPage))
        self.backToMenuButton_1.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.mainMenuPage))
        self.backToMenuButton_2.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.mainMenuPage))
        self.backToMenuButton_3.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.mainMenuPage))
        self.backToMenuButton_4.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.mainMenuPage))
        self.tutorialButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.tutorialPage))

        self.playButton.clicked.connect(self.playButtonFunction)
        self.startGameButton.clicked.connect(self.startGameButtonFunction)
        self.exitButton.clicked.connect(self.exitButtonFunction)
        self.rankButton.clicked.connect(self.rankButtonFunction)
        self.adminPanelButton.clicked.connect(self.adminButtonFunction)
        # self.betButton.clicked.connect(self.betButtonFunction)
        # self.hitButton.clicked.connect(self.hitButtonFunction)
        # self.standButton.clicked.connect(self.standButtonFunction)
        self.banButton.clicked.connect(self.adminBanButtonFunction)
        self.unbanButton.clicked.connect(self.adminUnbanButtonFunction)
        self.setAdminButton.clicked.connect(self.adminSetAdminButtonFunction)
        self.setUserButton.clicked.connect(self.adminSetUserButtonFunction)
        self.statButton.clicked.connect(self.statButtonFunction)

        # testowy button
        # self.setUserTestButton = QtWidgets.QPushButton(self.mainMenuPage)
        # self.setUserTestButton.setGeometry(QtCore.QRect(1010, 670, 75, 23))
        # self.setUserTestButton.setObjectName("setUserTestButton")
        # self.setUserTestButton.setText('TEST')
        # self.setUserTestButton.clicked.connect(self.testLoggedUsers)
        #
        self.addCardTestButton = QtWidgets.QPushButton(self.playPage)
        self.addCardTestButton.setGeometry(QtCore.QRect(220, 670, 75, 23))
        self.addCardTestButton.setObjectName("addCardTestButton")
        self.addCardTestButton.setText('add')
        self.addCardTestButton.clicked.connect(self.addCardTest)

        self.removeCardTestButton = QtWidgets.QPushButton(self.playPage)
        self.removeCardTestButton.setGeometry(QtCore.QRect(300, 670, 75, 23))
        self.removeCardTestButton.setObjectName("removeCardTestButton")
        self.removeCardTestButton.setText('remove')
        self.removeCardTestButton.clicked.connect(self.removeCardTest)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.playButton.setText(_translate("MainWindow", "PLAY"))
        self.rankButton.setText(_translate("MainWindow", "RANKING / STATISTICS"))
        self.loginButton_1.setText(_translate("MainWindow", "Login"))
        self.username_1.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username</span></p></body></html>"))
        self.manageButton_1.setText(_translate("MainWindow", "Manage"))
        self.logoutButton_1.setText(_translate("MainWindow", "Logout"))
        self.loginButton_2.setText(_translate("MainWindow", "Login"))
        self.username_2.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username</span></p></body></html>"))
        self.manageButton_2.setText(_translate("MainWindow", "Manage"))
        self.logoutButton_2.setText(_translate("MainWindow", "Logout"))
        self.loginButton_3.setText(_translate("MainWindow", "Login"))
        self.username_3.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username</span></p></body></html>"))
        self.manageButton_3.setText(_translate("MainWindow", "Manage"))
        self.logoutButton_3.setText(_translate("MainWindow", "Logout"))
        self.loginButton_4.setText(_translate("MainWindow", "Login"))
        self.username_4.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username</span></p></body></html>"))
        self.manageButton_4.setText(_translate("MainWindow", "Manage"))
        self.logoutButton_4.setText(_translate("MainWindow", "Logout"))
        self.loginButton_5.setText(_translate("MainWindow", "Login"))
        self.username_5.setText(_translate("MainWindow",
                                           "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Username</span></p></body></html>"))
        self.manageButton_5.setText(_translate("MainWindow", "Manage"))
        self.logoutButton_5.setText(_translate("MainWindow", "Logout"))
        self.adminPanelButton.setText(_translate("MainWindow", "ADMIN PANEL"))
        self.startGameButton.setText(_translate("MainWindow", "START GAME"))
        self.backToMenuButton_1.setText(_translate("MainWindow", "BACK"))
        self.label.setText(_translate("MainWindow", "NUMBER OF DECKS"))
        self.deck1rb.setText(_translate("MainWindow", "1"))
        self.deck2rb.setText(_translate("MainWindow", "2"))
        self.deck3rb.setText(_translate("MainWindow", "3"))
        self.label_2.setText(_translate("MainWindow", "DECK SKIN"))
        self.label_3.setText(_translate("MainWindow", "TIME TO MOVE"))
        self.timeSecondsLabel.setText(_translate("MainWindow", "10 s"))
        self.betLabel.setText(_translate("MainWindow", "500 $"))  # był $
        self.betButton.setText(_translate("MainWindow", "BET"))
        self.hitButton.setText(_translate("MainWindow", "HIT"))
        self.standButton.setText(_translate("MainWindow", "STAND"))
        self.exitButton.setText(_translate("MainWindow", "EXIT"))
        self.label_4.setText(_translate("MainWindow", "RANKING"))
        self.backToMenuButton_2.setText(_translate("MainWindow", "BACK"))
        self.statButton.setText(_translate("MainWindow", "SHOW STATISTICS"))
        self.backToMenuButton_3.setText(_translate("MainWindow", "BACK"))
        self.backToMenuButton_4.setText(_translate("MainWindow", "BACK"))
        self.banButton.setText(_translate("MainWindow", "BAN"))
        self.unbanButton.setText(_translate("MainWindow", "UNBAN"))
        self.setUserButton.setText(_translate("MainWindow", "SET USER"))
        self.setAdminButton.setText(_translate("MainWindow", "SET ADMIN"))
        self.label_6.setText(_translate("MainWindow", "ADMIN PANEL"))
        self.stl_3.setText(_translate("MainWindow", "Win ratio"))
        self.st_16.setText(_translate("MainWindow", "TextLabel"))
        self.st_15.setText(_translate("MainWindow", "TextLabel"))
        self.stl_5.setText(_translate("MainWindow", "Cards gotten"))
        self.st_5.setText(_translate("MainWindow", "TextLabel"))
        self.stl_11.setText(_translate("MainWindow", "Card 5"))
        self.st_18.setText(_translate("MainWindow", "TextLabel"))
        self.st_9.setText(_translate("MainWindow", "TextLabel"))
        self.stl_10.setText(_translate("MainWindow", "Card 4"))
        self.st_12.setText(_translate("MainWindow", "TextLabel"))
        self.st_14.setText(_translate("MainWindow", "TextLabel"))
        self.st_3.setText(_translate("MainWindow", "TextLabel"))
        self.stl_13.setText(_translate("MainWindow", "Card 7"))
        self.stl_14.setText(_translate("MainWindow", "Card 8"))
        self.st_1.setText(_translate("MainWindow", "TextLabel"))
        self.stl_4.setText(_translate("MainWindow", "Average cards per hand "))
        self.st_4.setText(_translate("MainWindow", "TextLabel"))
        self.stl_15.setText(_translate("MainWindow", "Card 9"))
        self.stl_17.setText(_translate("MainWindow", "Card J"))
        self.stl_7.setText(_translate("MainWindow", "Most picked card"))
        self.stl_1.setText(_translate("MainWindow", "Hands played"))
        self.stl_20.setText(_translate("MainWindow", "Card A"))
        self.st_7.setText(_translate("MainWindow", "TextLabel"))
        self.stl_12.setText(_translate("MainWindow", "Card 6"))
        self.stl_19.setText(_translate("MainWindow", "Card K"))
        self.stl_9.setText(_translate("MainWindow", "Card 3"))
        self.stl_16.setText(_translate("MainWindow", "Card 10"))
        self.stl_8.setText(_translate("MainWindow", "Card 2"))
        self.st_13.setText(_translate("MainWindow", "TextLabel"))
        self.st_8.setText(_translate("MainWindow", "TextLabel"))
        self.st_2.setText(_translate("MainWindow", "TextLabel"))
        self.stl_2.setText(_translate("MainWindow", "Won hands"))
        self.stl_18.setText(_translate("MainWindow", "Card Q"))
        self.st_10.setText(_translate("MainWindow", "TextLabel"))
        self.st_20.setText(_translate("MainWindow", "TextLabel"))
        self.st_11.setText(_translate("MainWindow", "TextLabel"))
        self.st_19.setText(_translate("MainWindow", "TextLabel"))
        self.st_17.setText(_translate("MainWindow", "TextLabel"))
        self.stl_6.setText(_translate("MainWindow", "Avarage game time [s]"))
        self.st_6.setText(_translate("MainWindow", "TextLabel"))
        self.userStatLabel.setText(_translate("MainWindow", "STATISTICS OF"))
        self.backToRankButton.setText(_translate("MainWindow", "BACK"))

    def timeSliderFunction(self, value):
        self.timeSecondsLabel.setText(str(value) + ' s')

    def betSliderFunction(self, value):
        self.betLabel.setText(str(value) + ' $')

    def openLoginDialog(self, index, stWid, username, avatar):
        self.LoginDialog = QtWidgets.QDialog()
        self.ui = Ui_LoginDialog(self.loggedUsers, index, stWid, username, avatar)
        self.ui.setupUi(self.LoginDialog)
        self.LoginDialog.exec()

    def logout(self, index, stWid):
        stWid.setCurrentIndex(0)
        self.loggedUsers[index].username = None
        self.loggedUsers[index].avatar = None
        self.loggedUsers[index].isAdmin = None

    def openManageDialog(self, user, avatar):
        self.ManageDialog = QtWidgets.QDialog()
        self.ui = Ui_Dialog(user, avatar)
        self.ui.setupUi(self.ManageDialog)
        self.ManageDialog.exec()

    def adminButtonFunction(self):
        db = blackjack.DataBase()
        if (blackjack.DataBase.checkIfAdminPresent(db, self.loggedUsers[0].username, self.loggedUsers[1].username,
                                                   self.loggedUsers[2].username, self.loggedUsers[3].username,
                                                   self.loggedUsers[4].username)):
            self.loadAdminList(0)
            self.stackedWidget.setCurrentWidget(self.adminPage)
            print("Admin page")
        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("ERROR")
            msg.setText("Not allowed to access! Admin need to be logged in.")
            x = msg.exec_()

    def loadAdminList(self, index):
        db = blackjack.DataBase()
        result = db.getPlayers2()
        self.adminListModel = TableModel(result, ['Username', 'isActive', 'isAdmin'])
        self.adminList.setModel(self.adminListModel)
        self.adminList.selectRow(index)
        self.adminList.setStyleSheet("selection-color: black ;selection-background-color: #FFC30B;")

    def adminBanButtonFunction(self):
        index = self.adminList.currentIndex().row()
        username = self.adminList.selectionModel().currentIndex().siblingAtColumn(0).data()
        db = blackjack.DataBase()
        db.makeBanned(username)
        self.loadAdminList(index)
        print('admin ban ', username)

    def adminUnbanButtonFunction(self):
        index = self.adminList.currentIndex().row()
        username = self.adminList.selectionModel().currentIndex().siblingAtColumn(0).data()
        db = blackjack.DataBase()
        db.makeUnBanned(username)
        self.loadAdminList(index)
        print('admin unban ', username)

    def adminSetAdminButtonFunction(self):
        index = self.adminList.currentIndex().row()
        username = self.adminList.selectionModel().currentIndex().siblingAtColumn(0).data()
        db = blackjack.DataBase()
        db.makeAdmin(username)
        self.loadAdminList(index)
        print('set admin ', username)

    def adminSetUserButtonFunction(self):
        index = self.adminList.currentIndex().row()
        username = self.adminList.selectionModel().currentIndex().siblingAtColumn(0).data()
        db = blackjack.DataBase()
        db.makeUser(username)
        self.loadAdminList(index)
        print('set user ', username)

    def playButtonFunction(self):
        self.stackedWidget.setCurrentWidget(self.setupPage)
        print('setup game')

    def startGameButtonFunction(self):
        players = self.comboBox.getUsers()
        print('players: ', players)
        if len(players) >= 2:

            users = []
            for el in players:
                if el == 'AI(easy)':
                    users.append('easy')
                elif el == 'AI(medium)':
                    users.append('medium')
                elif el == 'AI(hard)':
                    users.append('hard')
                else:
                    users.append('player')

            users2 = []
            for el in players:
                if el == 'AI(easy)':
                    users2.append([el, 'easy3.png'])
                elif el == 'AI(medium)':
                    users2.append([el, 'medium3.png'])
                elif el == 'AI(hard)':
                    users2.append([el, 'hard3.png'])
                else:
                    for user in self.loggedUsers:
                        if el == user.username:
                            users2.append([el, user.avatar])

            numberOfDecks = int(self.deckNumberGroup.checkedButton().text())
            timeToMove = self.timeSlider.value()
            game_start_data = {'numberOfUsers': len(players), 'users': users, 'numberOfDecks': numberOfDecks,
                               'timeToMove': timeToMove}
            if self.skin1rb.isChecked():
                skin = 'set1'
            else:
                skin = 'set2'
            print(game_start_data, skin)

            print(users2)
            self.hands = UserHands(users2, skin, self.playPage)  # rysowanie
            # TODO
            # game_start_data daje startowe dane do rozpoczecia gry
            # do przekazania do funkcji gry sa nastepujace obiekty:
            # 1.    self.hands - zbior wszystkich rak + opisy, to sa te cale prostokaty
            #       iterujac po liscie w tym obiekcie self.hands.hands[i] mozesz uzywac roznych funkcji
            #       self.hands.hands[i].addCard('2karo') dodaje karte do uzytkownika o tym indeksie, iteruje sie od gory zgodnie z ruchem wskazowek
            #       self.hands.removeCards() powinno usunac wszystkie karty z rak, do uzycia po zakonczonej rundzie
            #       self.hands.hands[i].changeBorderColour('akcja') zmienia kolor obramowki, jesli 'loss' to czarno, jesli 'turn' niebiesko, 'wait' zolto, 'win' czerwono
            #       czyli jak przegral, jego kolej, czeka na swoja ture, wygrany/remis na koncu
            # 2. przyciski: self.betButton, self.hitButton, self.standButton
            #       potem mozesz do nich clicked.connect(funkcja) zrobic do wylapywania ruchow
            # 3. self.replayButton po zakonczonej grze niech sie pojawi show(), a przed giera hide() i tutaj bedzie potrzebne zapisywanie ruchow, najlepeij jakas lista w stylu:
            #    [['uzyta funkcja do rysowania','index','karta-opcjonalnie'],[],[]] , przynajmniej cos takiego sobie wyobrazam, ze najlatwiej bedzie
            # 4. self.exitButton jak wcisnie to powinno przejsc do setupPage i giere wylaczyc czy cos, nwm

            self.play_game(game_start_data)

        else:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("ERROR")
            msg.setText("Need at least 2 players")
            x = msg.exec_()

    def play_game(self, game_start_date):
        self.stackedWidget.setCurrentWidget(self.playPage)
        self.replayButton.hide()
        self.betButton.hide()
        self.hitButton.hide()
        self.standButton.hide()
        self.addCardTestButton.hide()
        self.removeCardTestButton.hide()
        self.betSlider.hide()

        print('start game')
        t0 = time.time()
        twentyone = 21
        lowest_bet = 5
        t = 1
        yes = ['y', 'yes']
        no = ['n', 'no']

        db = blackjack.DataBase
        timeToMove = game_start_date['timeToMove']
        type = game_start_date['users']
        print(type)
        numer_of_decks = game_start_date['numberOfDecks']
        players = []
        for i in range(len(type)):
            if type[i] == 'medium':
                players.append(Player('AI medium'))
            elif type[i] == 'easy':
                players.append(Player('AI easy'))
            elif type[i] == 'hard':
                players.append(Player('AI hard'))
            else:
                players.append(Player('Player' + str(i)))
        players = np.asarray(players)
        self.win_state=[]

        def getPlayerResult(i):
            if (self.win_state[i] == 'w'):
                return True
            elif (self.win_state[i] == 'd'):
                return None
            else:
                return False

        def getAmount(i, amount):
            if getPlayerResult(i):
                return amount
            elif not getPlayerResult(i):
                return (-1 * amount)
            else:
                return 0

        def getCardDictFromList(cardOriginList):
            cardList = []

            for card in cardOriginList:
                if ('10' in card):
                    cardList.append("10")
                else:
                    cardList.append(card[-1:])

            cardDict = {}

            for card in cardList:
                cardDict[card] = cardList.count(card)

            return cardDict

        self.card_box = {
            'heart': (['A', 'J', 'Q', 'K'] + ['%d' % i for i in range(2, 11)]) * numer_of_decks,
            'diamond': (['A', 'J', 'Q', 'K'] + ['%d' % i for i in range(2, 11)]) * numer_of_decks,
            'club': (['A', 'J', 'Q', 'K'] + ['%d' % i for i in range(2, 11)]) * numer_of_decks,
            'spade': (['A', 'J', 'Q', 'K'] + ['%d' % i for i in range(2, 11)]) * numer_of_decks
        }
        self.card_cnt = 0
        self.shuffle_point = np.random.randint((numer_of_decks * 52) // 2, numer_of_decks * 52)
        number_of_players = len(players)
        bjs = [False for i in range(number_of_players)]
        left_over = [None for i in range(number_of_players)]
        self.win_state = ['l' for i in range(number_of_players)]
        self.moves = {}
        self.points_of_players = {}
        self.money_of_players = {}
        self.bet_of_players = {}

        '''
            for i in range(number_of_players):
                print(' ****************** PLAYER %d - %s ****************' % (i + 1, players[i].name))
                # setting initial bet0
                players[i].set_bet(lowest_bet, type[i])
                #wait(t)
                #QtTest.QTest.qWait(2000)
            '''

        self.timer = QtCore.QTimer()
        self.timer.setSingleShot(True)

        for k in range(number_of_players):
            self.hands.hands[k].money.hide()


        for i in range(number_of_players):
            points_of_pl =[]
            if type[i] == "player":  # powinien być player
                self.points_of_players[i] =[]
                # players[i].set_bet(lowest_bet, type[i])
                try:
                    self.hitButton.disconnect()
                    self.standButton.disconnect()
                    self.betButton.disconnect()
                except TypeError:
                    pass

                self.hands.hands[i].changeBorderColour('turn')
                self.hands.hands[i].action.setText('Turn')
                self.betButton.show()
                self.betSlider.show()
                self.betLabel.show()
                QtTest.QTest.qWait(2000)
                self.value = self.betSlider.value()
                players[i].set_bet_player(self.betSlider.value())
                self.bet_of_players[i]=players[i].get_bet()
                '''
                    #TODO 
                    chcemy ograniczyć czas na wykonanie akcji wybarnia wartości, którą player obstawia (betbutton)
                    :
                    - QTimer()
                    - SingleShot()
                    - może to? https://stackoverflow.com/questions/54918549/is-there-any-time-limit-in-pushing-the-push-button-in-pyqt5?rq=1
                    - może to? https://stackoverflow.com/questions/41545300/equivalent-to-time-sleep-for-a-pyqt-application
                    '''
                self.betMove = False

                def betFun():
                    self.value = self.betSlider.value()
                    players[i].set_bet_player(self.value)
                    self.betButton.hide()
                    self.betSlider.hide()
                    self.betLabel.hide()
                    self.betMove = True
                    print('BET', self.value)

                self.betButton.clicked.connect(betFun)

                for x in range(timeToMove):
                    QtTest.QTest.qWait(1000)
                    print("waitin bet")
                    if self.betMove == True:
                        players[i].set_bet_player(self.betSlider.value())
                        print("break")
                        break

                self.betButton.hide()
                self.betSlider.hide()
                self.betLabel.hide()
                QtTest.QTest.qWait(2000)
                print(' ****************** PLAYER - %s ****************' % players[i].name)
                # start session
                print('player is picking two cards...')
                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 2, self.card_cnt, self.shuffle_point, numer_of_decks)
                players[i].new_session(self.card_box)
                # print(card_box)
                players[i].show_state()
                bjs[i] = players[i].check_blackjack(twentyone)
                # wait(t)
                # QtTest.QTest.qWait(2000)

                print(' ****************** PLAYER - %s ****************' % players[i].name)
                players[i].show_state()
                self.hands.hands[i].addCard(players[i].last_card())
                QtTest.QTest.qWait(500)
                self.hands.hands[i].addCard(players[i].last_card1())
                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                points_of_pl.append(players[i].get_points())
                self.hands.hands[i].bet.setText('Bet: ' + str(players[i].get_bet()) + '$')
                QtTest.QTest.qWait(2000)
                left_over[i] = players[i].points
                if bjs[i]:
                    self.hands.hands[i].changeBorderColour('win')
                    self.hands.hands[i].action.setText('Win')
                    # QtTest.QTest.qWait(2000)
                    self.moves[i] = players[i].get_stats()
                    self.points_of_players[i] = points_of_pl
                    left_over[i] = players[i].points
                else:
                    #odpal timer ktory na koniec zrobi stand
                    self.endMove = False
                    # odpal watek do sprawdzania buttonow hit/stand i zaczekaj na jego koniec (join)

                    def hitFun():
                        self.timer.stop()
                        self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 1, self.card_cnt, self.shuffle_point,
                                                                     numer_of_decks)
                        print("xxxx   ", i, players[i])
                        players[i].hit(self.card_box)
                        self.hands.hands[i].addCard(players[i].last_card())
                        print("HIT", i)
                        self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                        points_of_pl.append(players[i].get_points())
                        if players[i].points >= twentyone:
                            left_over[i] = players[i].points
                            bjs[i] = players[i].check_blackjack(twentyone)
                            self.moves[i] = players[i].get_stats()
                            self.points_of_players[i]=points_of_pl
                            self.hands.hands[i].changeBorderColour('wait')
                            self.hands.hands[i].action.setText('Wait')
                            self.endMove = True
                            self.hitButton.hide()
                            self.standButton.hide()
                        else:
                            self.timer.start(10000) #odswieza czekanie

                    def standFun():
                        self.timer.stop()
                        self.endMove = True
                        left_over[i] = players[i].points
                        bjs[i] = players[i].check_blackjack(twentyone)
                        self.moves[i] = players[i].get_stats()
                        self.points_of_players[i]=points_of_pl
                        self.hands.hands[i].changeBorderColour('wait')
                        self.hands.hands[i].action.setText('Wait')
                        self.hitButton.hide()
                        self.standButton.hide()
                        print("STAND")
                    '''
                    def waitFun():
                        print("start watku")
                        while self.endMove == False:
                            QtTest.QTest.qWait(100)
                        print("koniec watku")
                        
                    thread = threading.Thread(target=waitFun, daemon=True)
                    '''

                    self.timer.timeout.connect(standFun)
                    self.hitButton.clicked.connect(hitFun)
                    self.standButton.clicked.connect(standFun)

                    #thread.start()
                    self.timer.start(10000)
                    self.hitButton.show()
                    self.standButton.show()
                    #QtTest.QTest.qWait(60000)
                    #print("prejoin")
                    #thread.join()
                    #print("afterjoin")

                    #glupie ale o dziwo dziala XD
                    for x in range(100):
                        QtTest.QTest.qWait(1000)
                        print("waitin")
                        if self.endMove == True:
                            print("break")
                            break

                    '''def hitStandCheck():
                        TODO
                        chcemy ograniczyć czas na wciśniecei graj lub stop (hitbutton or standbutton)
                        
                        # stop betting ?
                        print("hitStandCheck")
                        if self.check_value == True:
                            self.timer.stop()
                            print('player is picking a new card...')
                            card_box, card_cnt, shuffle_point = card_inc(card_box, 1, card_cnt, shuffle_point,
                                                                         numer_of_decks)
                            players[i].hit(card_box)
                            if players[i].points >= twentyone:
                                left_over[i] = players[i].points
                                bjs[i] = players[i].check_blackjack(twentyone)
                                print("stop timer2")
                                self.timer2.stop()
                            else:
                                self.check_value = None
                                self.timer.start(10000)
                                print("timer restart")
                        elif self.check_value == False:
                            print("stop timer2")
                            self.timer2.stop()
                            self.check_value = None
                            if self.timer.isActive():
                                self.timer.stop()
                            left_over[i] = players[i].points
                            bjs[i] = players[i].check_blackjack(twentyone)
                            self.hitButton.hide()
                            self.standButton.hide()

                    self.timer2.timeout.connect(hitStandCheck)
                    watek = threading.Thread(target=self.timer2.start())
                    watek.start()
                    watek.join()'''

            elif type[i] == "easy":  # powinien być easy
                players[i].set_bet(lowest_bet, type[i])
                points_of_pl = []
                self.hands.hands[i].changeBorderColour('turn')
                self.hands.hands[i].action.setText('Turn')
                self.bet_of_players[i] = players[i].get_bet()
                # QtTest.QTest.qWait(2000)
                print(' ****************** PLAYER - %s ****************' % players[i].name)
                print('player is picking two cards...')
                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 2, self.card_cnt, self.shuffle_point, numer_of_decks)
                players[i].new_session(self.card_box)
                players[i].show_state()
                bjs[i] = players[i].check_blackjack(twentyone)
                # wait(t)
                QtTest.QTest.qWait(2000)

                print(' ****************** PLAYER - %s ****************' % players[i].name)
                players[i].show_state()
                self.hands.hands[i].addCard(players[i].last_card())
                QtTest.QTest.qWait(500)
                self.hands.hands[i].addCard(players[i].last_card1())
                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                points_of_pl.append(players[i].get_points())
                self.hands.hands[i].bet.setText('Bet: ' + str(players[i].get_bet()) + '$')
                QtTest.QTest.qWait(2000)
                left_over[i] = players[i].points
                if bjs[i]:
                    self.hands.hands[i].changeBorderColour('win')
                    self.hands.hands[i].action.setText('Win')
                    left_over[i] = players[i].points
                    self.moves[i] = players[i].get_stats()
                    self.points_of_players[i] = points_of_pl
                    QtTest.QTest.qWait(2000)
                else:
                    while players[i].points < 20:
                        # stop betting ?
                        print('do you want to hit ? (y / n)')
                        if random.randint(0, 1) == True:
                            hit_stand = "y"
                            print('y')
                            print('player is picking a new card...')
                            self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 1, self.card_cnt, self.shuffle_point,
                                                                         numer_of_decks)
                            players[i].hit(self.card_box)
                            self.hands.hands[i].addCard(players[i].last_card())
                            points_of_pl.append(players[i].get_points())
                            self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                            QtTest.QTest.qWait(2000)
                            if players[i].points >= twentyone:
                                left_over[i] = players[i].points
                                bjs[i] = players[i].check_blackjack(twentyone)
                                self.hands.hands[i].changeBorderColour('wait')
                                self.hands.hands[i].action.setText('Wait')
                                self.points_of_players[i]=points_of_pl
                                break
                        else:
                            print('n')
                            left_over[i] = players[i].points
                            bjs[i] = players[i].check_blackjack(twentyone)
                            self.moves[i] = players[i].get_stats()
                            self.hands.hands[i].changeBorderColour('wait')
                            self.hands.hands[i].action.setText('Wait')
                            self.points_of_players[i]=points_of_pl
                            QtTest.QTest.qWait(2000)
                            break
            elif type[i] == "hard":
                points_of_pl=[]
                players[i].set_bet(lowest_bet, type[i])
                self.hands.hands[i].changeBorderColour('turn')
                self.hands.hands[i].action.setText('Turn')
                self.bet_of_players[i] = players[i].get_bet()
                # QtTest.QTest.qWait(2000)
                print(' ****************** PLAYER - %s ****************' % players[i].name)
                # start session
                print('player is picking two cards...')
                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 2, self.card_cnt, self.shuffle_point, numer_of_decks)
                players[i].new_session(self.card_box)
                # print(card_box)
                players[i].show_state()
                bjs[i] = players[i].check_blackjack(twentyone)
                # wait(t)
                QtTest.QTest.qWait(2000)

                print(' ****************** PLAYER - %s ****************' % players[i].name)
                players[i].show_state()
                self.hands.hands[i].addCard(players[i].last_card())
                QtTest.QTest.qWait(500)
                self.hands.hands[i].addCard(players[i].last_card1())
                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                points_of_pl.append(players[i].get_points())
                self.hands.hands[i].bet.setText('Bet: ' + str(players[i].get_bet()) + '$')
                QtTest.QTest.qWait(2000)
                left_over[i] = players[i].points
                if bjs[i]:
                    left_over[i] = players[i].points
                    self.moves[i] = players[i].get_stats()
                    self.hands.hands[i].changeBorderColour('win')
                    self.hands.hands[i].action.setText('Win')
                    self.points_of_players[i]=points_of_pl
                    QtTest.QTest.qWait(2000)
                else:
                    while True:
                        # stop betting ?
                        print('do you want to hit ? (y / n)')
                        if players[i].points < 20:
                            hit_stand = "y"
                            print('y')
                            print('player is picking a new card...')
                            self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 1, self.card_cnt, self.shuffle_point,
                                                                         numer_of_decks)
                            number_of_points = 21 - players[i].points
                            if number_of_points > 9:
                                number_of_points = np.int64(np.floor(number_of_points / 2))
                                players[i].hit_hard(self.card_box, number_of_points)
                            else:
                                players[i].hit_hard(self.card_box, number_of_points)
                            self.hands.hands[i].addCard(players[i].last_card())
                            points_of_pl.append(players[i].get_points())
                            self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                            QtTest.QTest.qWait(2000)
                            if players[i].points >= twentyone:
                                left_over[i] = players[i].points
                                bjs[i] = players[i].check_blackjack(twentyone)
                                self.hands.hands[i].changeBorderColour('wait')
                                self.hands.hands[i].action.setText('Wait')
                                self.moves[i] = players[i].get_stats()
                                self.points_of_players[i]=points_of_pl
                                QtTest.QTest.qWait(2000)
                                break
                        else:
                            print('n')
                            bjs[i] = players[i].check_blackjack(twentyone)
                            self.moves[i] = players[i].get_stats()
                            left_over[i] = players[i].points
                            self.hands.hands[i].changeBorderColour('wait')
                            self.hands.hands[i].action.setText('Wait')
                            self.points_of_players[i]= points_of_pl
                            QtTest.QTest.qWait(2000)
                            break
            else:
                points_of_pl=[]
                players[i].set_bet(lowest_bet, type[i])
                print(' ****************** PLAYER - %s ****************' % players[i].name)
                # start session
                self.hands.hands[i].changeBorderColour('turn')
                self.hands.hands[i].action.setText('Turn')
                self.bet_of_players[i] = players[i].get_bet()
                # QtTest.QTest.qWait(2000)
                print('player is picking two cards...')
                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 2, self.card_cnt, self.shuffle_point, numer_of_decks)
                players[i].new_session(self.card_box)
                # print(card_box)
                players[i].show_state()
                bjs[i] = players[i].check_blackjack(twentyone)
                # wait(t)
                # QtTest.QTest.qWait(2000)

                print(' ****************** PLAYER - %s ****************' % players[i].name)
                players[i].show_state()
                self.hands.hands[i].addCard(players[i].last_card())
                QtTest.QTest.qWait(500)
                self.hands.hands[i].addCard(players[i].last_card1())
                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                points_of_pl.append(players[i].get_points())
                self.hands.hands[i].bet.setText('Bet: ' + str(players[i].get_bet()) + '$')
                QtTest.QTest.qWait(2000)
                left_over[i] = players[i].points
                if bjs[i]:
                    left_over[i] = players[i].points
                    self.moves[i] = players[i].get_stats()
                    self.hands.hands[i].changeBorderColour('win')
                    self.hands.hands[i].action.setText('Win')
                    QtTest.QTest.qWait(2000)
                else:
                    while True:
                        print('do you want to hit ? (y / n)')
                        if players[i].check_A() == 0:
                            if players[i].points < 17:
                                hit_stand = "y"
                                print('y')
                                print('player is picking a new card...')
                                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 1, self.card_cnt, self.shuffle_point,
                                                                             numer_of_decks)
                                players[i].hit(self.card_box)
                                self.hands.hands[i].addCard(players[i].last_card())
                                points_of_pl.append(players[i].get_points())
                                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                                QtTest.QTest.qWait(2000)
                                if players[i].points >= twentyone:
                                    left_over[i] = players[i].points
                                    self.moves[i] = players[i].get_stats()
                                    bjs[i] = players[i].check_blackjack(twentyone)
                                    self.hands.hands[i].changeBorderColour('wait')
                                    self.points_of_players[i]=points_of_pl
                                    self.hands.hands[i].action.setText('Wait')
                                    QtTest.QTest.qWait(2000)
                                    break
                            else:
                                print('n')
                                bjs[i] = players[i].check_blackjack(twentyone)
                                self.moves[i] = players[i].get_stats()
                                left_over[i] = players[i].points
                                self.points_of_players[i] = points_of_pl
                                self.hands.hands[i].changeBorderColour('wait')
                                self.hands.hands[i].action.setText('Wait')
                                QtTest.QTest.qWait(2000)
                                break
                        elif players[i].check_A() == 1:
                            if players[i].points < 18:
                                hit_stand = "y"
                                print('y')
                                print('player is picking a new card...')
                                self.card_box, self.card_cnt, self.shuffle_point = card_inc(self.card_box, 1, self.card_cnt, self.shuffle_point,
                                                                             numer_of_decks)
                                players[i].hit(self.card_box)
                                self.hands.hands[i].addCard(players[i].last_card())
                                points_of_pl.append(players[i].get_points())
                                self.hands.hands[i].points.setText('Points: ' + str(players[i].get_points()))
                                QtTest.QTest.qWait(2000)
                                if players[i].points >= twentyone:
                                    left_over[i] = players[i].points
                                    self.moves[i] = players[i].get_stats()
                                    bjs[i] = players[i].check_blackjack(twentyone)
                                    self.hands.hands[i].changeBorderColour('wait')
                                    self.hands.hands[i].action.setText('Wait')
                                    self.points_of_players[i] = points_of_pl
                                    QtTest.QTest.qWait(2000)
                                    break
                            else:
                                print('n')
                                bjs[i] = players[i].check_blackjack(twentyone)
                                self.moves[i] = players[i].get_stats()
                                left_over[i] = players[i].points
                                self.points_of_players[i] = points_of_pl
                                self.hands.hands[i].changeBorderColour('wait')
                                self.hands.hands[i].action.setText('Wait')
                                QtTest.QTest.qWait(2000)
                                break
                        elif players[i].check_A() == 2:
                            print('n')
                            bjs[i] = players[i].check_blackjack(twentyone)
                            self.moves[i] = players[i].get_stats()
                            left_over[i] = players[i].points
                            self.points_of_players=points_of_pl
                            self.hands.hands[i].changeBorderColour('wait')
                            self.hands.hands[i].action.setText('Wait')
                            QtTest.QTest.qWait(2000)
                            break

        bjs = np.array(bjs)
        self.win_state = np.array(self.win_state)
        left_over = np.array(left_over)
        print(left_over)
        for l in range(number_of_players):
            print(left_over[l])
            if left_over[l] > 21:
                left_over[l] = 0

        print(left_over)
        for k in range(number_of_players):
            if (max(left_over) == left_over[k]) and left_over[k] > 0:
                self.win_state[k] = 'w'
            else:
                self.win_state[k] = 'l'

        for s in range(number_of_players):
            if self.win_state[s] == 'w':
                self.hands.hands[s].changeBorderColour('win')
                self.hands.hands[s].action.setText('Win')
            else:
                self.hands.hands[s].changeBorderColour('lost')
                self.hands.hands[s].action.setText('Lost')
        print(self.win_state)
        for i in range(number_of_players):
            players[i].update_money(self.win_state[i])
            if self.win_state[i] == 'w':
                wstate, gstate = 'wins', 'gains'
            else:
                wstate, gstate = 'loses', 'loses'
            print('"%s" %s, %s bet of %d, current fund: %d' % (
                players[i].name, wstate, gstate, players[i].bet if not bjs[i] else 1.5 * players[i].bet,
                players[i].money))
            # players[i].show_state()
        for l in range(number_of_players):
            print(players[l].money)
            self.money_of_players[l] = players[l].money

        for k in range(number_of_players):
            self.hands.hands[k].money.show()
            self.hands.hands[k].money.setText(str(self.money_of_players[k]) + '$')


        total_time = time.time() - t0
        print('Game time: ' + str(total_time))
        print('###################################################################################')
        print('################################## GAME OVER ######################################')

                # W TYM MIEJSCU JEST ZRZUCANIE STATYSTYK DO BAZY DANYCH PO ZAKOŃCZONEJ ROZGRYWCE!
               # user
        if(type[i] == "player"):
                   total_time = time.time() - t0
                   db.updatePlayerStat(db,players[i].name,getPlayerResult(i),round(total_time,2),getAmount(i,players[i].bet if not bjs[i] else 1.5 * players[i].bet))
                   db.updateCardStats(db,players[i].name,getCardDictFromList(players[i].get_stats()))
               # AI easy
        if (type[i] == "easy"):
                   total_time = time.time() - t0
                   db.updatePlayerStat(db, 'AI- easy', getPlayerResult(i), round(total_time, 2),getAmount(i, players[i].bet if not bjs[i] else 1.5 * players[i].bet))
                   db.updateCardStats(db, 'AI- easy', getCardDictFromList(players[i].get_stats()))
               # AI medium
        if (type[i] == "medium"):
                   total_time = time.time() - t0
                   db.updatePlayerStat(db, 'AI- medium', getPlayerResult(i), round(total_time, 2),getAmount(i, players[i].bet if not bjs[i] else 1.5 * players[i].bet))
                   db.updateCardStats(db, 'AI- medium' , getCardDictFromList(players[i].get_stats()))
               # AI hard
        if (type[i] == "hard"):
                   total_time = time.time() - t0
                   db.updatePlayerStat(db, 'AI- hard', getPlayerResult(i), round(total_time, 2),getAmount(i, players[i].bet if not bjs[i] else 1.5 * players[i].bet))
                   db.updateCardStats(db, 'AI- hard' , getCardDictFromList(players[i].get_stats()))
               # W TYM MIEJSCU SIE TO KONCZY !


        self.replayButton.show()
        print(self.moves)
        self.replayButton.clicked.connect(lambda: self.replayButtonFunction())

    def exitButtonFunction(self):
        self.hands.setParent(None)
        self.stackedWidget.setCurrentWidget(self.setupPage)
        print('exit game')

    def betButtonFunction(self, Player, value):
        Player.set_bet_player(value)
        self.betButton.hide()
        self.betSlider.hide()
        self.betLabel.hide()
        print('bet')

    def hitButtonFunction(self):
        self.check_value = True
        print(self.check_value)
        print('hit')

    def standButtonFunction(self):
        self.check_value = False
        print(self.check_value)
        print('stand')

    def replayButtonFunction(self):
        print(self.moves)
        self.removeCardTest()
        values = list(self.moves.values())

        for i in range(len(values)):
            self.hands.hands[i].money.hide()

        for k in range(len(values)):
            self.hands.hands[k].changeBorderColour('turn')
            self.hands.hands[k].action.setText('Turn')
            self.hands.hands[k].bet.setText('Bet: ' + str(self.bet_of_players[k]) + '$')
            for l in range(len(values[k])):
                self.hands.hands[k].addCard(values[k][l])
                if l == 0:
                    QtTest.QTest.qWait(500)
                else:
                    self.hands.hands[k].points.setText(str(self.points_of_players[k][l-1]))
                    QtTest.QTest.qWait(2000)
            self.hands.hands[k].changeBorderColour('wait')
            self.hands.hands[k].action.setText('Wait')

        QtTest.QTest.qWait(2000)
        for s in range(len(values)):
            self.hands.hands[s].money.show()
            self.hands.hands[s].money.setText(str(self.money_of_players[s]) + '$')
            if self.win_state[s] == 'w':
                self.hands.hands[s].changeBorderColour('win')
                self.hands.hands[s].action.setText('Win')
            else:
                self.hands.hands[s].changeBorderColour('lost')
                self.hands.hands[s].action.setText('Lost')

        QtTest.QTest.qWait(2000)

    def rankButtonFunction(self):
        db = blackjack.DataBase()
        result = db.getRank()
        self.rankingListModel = TableModel(result, ['Username', 'Money', 'WinRatio'])
        self.rankingList.setModel(self.rankingListModel)
        self.rankingList.selectRow(0)
        self.stackedWidget.setCurrentWidget(self.rankingPage)
        print('show actual ranking, by money')

    def statButtonFunction(self):
        username = self.rankingList.selectionModel().currentIndex().siblingAtColumn(0).data()

        playerStat = db.getPlayerStatistics(username)

        self.st_1.setText(str(playerStat["HandsPlayed"]))
        self.st_2.setText(str(playerStat["WonHands"]))
        self.st_3.setText(str(round(playerStat["WinRatio"], 2)))
        self.st_6.setText(str(round(playerStat["AverageTimeToMove"], 2)))
        self.st_7.setText(str(playerStat["MostPickedCard"]))
        self.st_5.setText(str(playerStat["CardsGotten"]))

        player = db.getPlayer(username)
        self.st_4.setText(str(round(blackjack.DataBase.getProperStatToAvoidZeroDivision(db, playerStat["CardsGotten"],
                                                                                        playerStat["HandsPlayed"]), 2)))

        cardStat = db.getCardStatistics(username)
        self.st_8.setText(str(cardStat["2"]))
        self.st_9.setText(str(cardStat["3"]))
        self.st_10.setText(str(cardStat["4"]))
        self.st_11.setText(str(cardStat["5"]))
        self.st_12.setText(str(cardStat["6"]))
        self.st_13.setText(str(cardStat["7"]))
        self.st_14.setText(str(cardStat["8"]))
        self.st_15.setText(str(cardStat["9"]))
        self.st_16.setText(str(cardStat["10"]))
        self.st_17.setText(str(cardStat["J"]))
        self.st_18.setText(str(cardStat["Q"]))
        self.st_19.setText(str(cardStat["K"]))
        self.st_20.setText(str(cardStat["A"]))

        pixmap = QPixmap('images/avatars/' + str(player["avatar"])).scaled(100, 100)
        self.statAvatar.setPixmap(pixmap)
        self.statAbout.setText(str(player["description"]))
        self.statAbout.setWordWrap(True)
        self.userStatLabel.setText('Statistics of ' + username)
        self.stackedWidget.setCurrentWidget(self.statisticsPage)
        print('stats of selected user')

    def testLoggedUsers(self):
        print()
        print('index, Username, avatar, isAdmin')
        for i in range(5):
            print(i, self.loggedUsers[i].username, self.loggedUsers[i].avatar, self.loggedUsers[i].isAdmin)

    def addCardTest(self):
        # print('add card')
        for i in range(len(self.hands.hands)):
            self.hands.hands[i].addCard('club_2')

    def removeCardTest(self):
        self.hands.removeCards()


class LoggedUser(object):
    def __init__(self):
        self.username = None
        self.avatar = None
        self.isAdmin = None


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data, headers):
        super(TableModel, self).__init__()
        self._data = data
        self.horizontalHeaders = [''] * 3
        self.setHeaderData(0, Qt.Horizontal, headers[0])
        self.setHeaderData(1, Qt.Horizontal, headers[1])
        self.setHeaderData(2, Qt.Horizontal, headers[2])

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])

    def setHeaderData(self, section, orientation, data, role=Qt.EditRole):
        if orientation == Qt.Horizontal and role in (Qt.DisplayRole, Qt.EditRole):
            try:
                self.horizontalHeaders[section] = data
                return True
            except:
                return False
        return super().setHeaderData(section, orientation, data, role)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            try:
                return self.horizontalHeaders[section]
            except:
                pass
        return super().headerData(section, orientation, role)


class UserHands(QtWidgets.QWidget):
    def __init__(self, players, skin, parent=None):
        super(UserHands, self).__init__(parent)
        self.hands = []
        for i in range(len(players)):
            hand = UserHand(math.pi * 2 / len(players), i, players[i], skin, parent, self)
            # hand.addCard('2karo')
            self.hands.append(hand)

    def removeCards(self):
        for i in range(len(self.hands)):
            self.hands[i].removeCards()
            # TODO nwm tu po usunieciu kart to niech zresetuje wszystko na startowe
            self.hands[i].bet.setText('Bet $')
            self.hands[i].points.setText('Points')
            self.hands[i].money.setText('Money $')
            self.hands[i].action.setText('Action')
            self.hands[i].changeBorderColour('wait')


class UserHand(QtWidgets.QFrame):
    def __init__(self, angle, index, user, skin, animParent, parent=None):
        super(UserHand, self).__init__(parent)
        self.setObjectName("myframe")
        self.setStyleSheet(
            "#myframe {border: 5px solid #FEFE58} QFrame {background-color: #CFABDB; font-size: 12px;color: #FEFE58; font-weight: bold;}")
        r = 240  # ustawianie miejsca
        a = 300
        b = 500
        # TODO nwm spolrzedne biegunowe/eliptyczne, przy 5 troche za ciasno wyglada
        self.x = math.floor(-r * math.cos(math.pi / 2 + angle * index) + 620)
        self.y = math.floor(-r * math.sin(math.pi / 2 + angle * index) + 327)
        print('x ', self.x, ', y ', self.y)
        self.setGeometry(QtCore.QRect(self.x - 150, self.y - 80, 300, 170))  # x,y  1240, 672 tyle ma obraz stolu
        self.vBox = QtWidgets.QVBoxLayout(self)  # main vbox
        self.vBox.setAlignment(Qt.AlignCenter)
        self.hBox = QtWidgets.QHBoxLayout()  # holds cards
        self.hBox.setSpacing(1)
        self.hBox.setGeometry(QtCore.QRect(0, 0, 300, 100))
        self.hBox.setAlignment(Qt.AlignCenter)
        self.hBox2 = QtWidgets.QHBoxLayout()  # holds user info
        self.hBox2.setAlignment(Qt.AlignCenter)
        self.hBox2.setSpacing(10)
        self.vBox.addLayout(self.hBox)
        self.vBox.addLayout(self.hBox2)
        self.vBox.setSpacing(1)
        self.money = QtWidgets.QLabel()
        self.money.setText('Money $')
        self.hBox2.addWidget(self.money)
        self.avatar = QtWidgets.QLabel()
        self.pixmapAvatar = QPixmap('images/avatars/' + user[1]).scaled(41, 41)
        self.avatar.setPixmap(self.pixmapAvatar)
        self.hBox2.addWidget(self.avatar)
        self.vBox2 = QtWidgets.QVBoxLayout()
        self.username = QtWidgets.QLabel()
        self.username.setText(user[0])
        self.points = QtWidgets.QLabel()
        self.points.setText("Points")
        self.vBox2.addWidget(self.username)
        self.vBox2.addWidget(self.points)
        self.hBox2.addLayout(self.vBox2)
        self.vBox3 = QtWidgets.QVBoxLayout()
        self.action = QtWidgets.QLabel()
        self.action.setText('Action')
        self.bet = QtWidgets.QLabel()
        self.bet.setText('Bet $')
        self.vBox3.addWidget(self.action)
        self.vBox3.addWidget(self.bet)
        self.hBox2.addLayout(self.vBox3)
        self.skin = skin
        self.animParent = animParent

    def addCard(self, cardname):  # tutaj jakas animacje pewnie
        self.card = QtWidgets.QLabel()
        self.pixmapCard = QPixmap('images/cards/' + self.skin + '/' + cardname + '.png').scaled(80, 100)
        self.card.setPixmap(self.pixmapCard)
        self.card.hide()
        self.hBox.addWidget(self.card)
        # print('pos in hbox ', self.card.pos())

        cardTemp = AnimatedCard(self.skin, self.card, self.animParent)  # to dziala
        cardTemp.animate(cardname, self.x - 40, self.y - 70)

    def removeCards(self):
        while self.hBox.count():
            child = self.hBox.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
                # print("delete")

    def setPoints(self, points):
        self.points.setText(str(points))

    def changeBorderColour(self, action):
        if action == 'turn':
            colour = '78C1FF'
        elif action == 'lost':
            colour = '010508'
        elif action == 'wait':
            colour = 'FEFE58'
        elif action == 'win':
            colour = 'D70000'
        self.setStyleSheet(
            "#myframe {border: 5px solid #" + colour + "} QFrame {background-color: #CFABDB; font-size: 12px;color: "
                                                       "#FEFE58; font-weight: bold;}")


class AnimatedCard(QtWidgets.QLabel):
    def __init__(self, skin, card, parent=None):
        super(AnimatedCard, self).__init__(parent)
        self.skin = skin
        self.card = card
        self.anim = QPropertyAnimation(self, b"pos")
        self.anim.setStartValue(QPoint(580, 281))
        self.anim.setDuration(1000)
        self.anim.finished.connect(self.animationEnd)

    def animate(self, cardname, x, y):
        self.pixmapCard = QPixmap('images/cards/' + self.skin + '/' + cardname + '.png').scaled(80, 100)
        self.anim.setEndValue(QPoint(x, y))
        self.setPixmap(self.pixmapCard)
        self.show()
        self.card.hide()
        self.anim.start()

    def animationEnd(self):
        self.card.show()
        self.deleteLater()


class ComboBoxUsers(QtWidgets.QWidget):
    def __init__(self, loggedUsers, parent=None):
        super(ComboBoxUsers, self).__init__(parent)
        self.loggedUsers = loggedUsers
        self.setGeometry(QtCore.QRect(10, 10, 751, 511))
        self.vBox = QtWidgets.QVBoxLayout(self)

        self.comboBox_1 = ComboBox(loggedUsers)
        self.comboBox_1.setMinimumSize(QtCore.QSize(0, 44))
        self.comboBox_2 = ComboBox(loggedUsers)
        self.comboBox_2.setMinimumSize(QtCore.QSize(0, 44))
        self.comboBox_3 = ComboBox(loggedUsers)
        self.comboBox_3.setMinimumSize(QtCore.QSize(0, 44))
        self.comboBox_4 = ComboBox(loggedUsers)
        self.comboBox_4.setMinimumSize(QtCore.QSize(0, 44))
        self.comboBox_5 = ComboBox(loggedUsers)
        self.comboBox_5.setMinimumSize(QtCore.QSize(0, 44))

        self.vBox.addWidget(self.comboBox_1)
        self.vBox.addWidget(self.comboBox_2)
        self.vBox.addWidget(self.comboBox_3)
        self.vBox.addWidget(self.comboBox_4)
        self.vBox.addWidget(self.comboBox_5)

    def getUsers(self):
        lista2 = []
        for i in range(5):
            cb = self.vBox.itemAt(i).widget()
            if cb.currentText() is not None and cb.currentText() != 'None':
                lista2.append(cb.currentText())
        return lista2


class ComboBox(QtWidgets.QComboBox):
    popupAboutToBeShown = QtCore.pyqtSignal()
    dataLeft = []
    dataInUse = []

    def __init__(self, loggedUsers, parent=None):
        super(ComboBox, self).__init__(parent)
        self.loggedUsers = loggedUsers
        self.activated.connect(self.updateMe)
        self.tempTxt = None
        self.addItems(['None'])
        self.setStyleSheet("QComboBox { font-size: 13px;color: #FEFE58; font-weight: bold;}")

    def showPopup(self):
        logg = []
        # nowa aktualna lista zalogowanych
        for el in self.loggedUsers:
            if el.username is not None:
                logg.append(el.username)

        # wyczysc left i inuse jesli juz nie zalogowani
        print(logg)
        for el in self.dataLeft:
            if el not in logg:
                self.dataLeft.remove(el)
        for el in self.dataInUse:
            if el not in logg:
                self.dataInUse.remove(el)

        # jesli nie nowy wpis w uzyciu to dodaj do mozliwych
        for el in logg:
            if el not in self.dataInUse and el not in self.dataLeft:
                self.dataLeft.append(el)

        # print('InUse ', self.dataInUse)
        # print('Left ', self.dataLeft)
        self.clear()

        lista = ['None'] + self.dataLeft + ['AI(easy)', 'AI(medium)', 'AI(hard)']
        if self.tempTxt in lista:
            lista.remove(self.tempTxt)
        if self.tempTxt is not None:
            lista.insert(0, self.tempTxt)
        self.addItems(lista)
        self.setCurrentText(self.tempTxt)
        # print('curr ', self.currentText())
        super(ComboBox, self).showPopup()

    def updateMe(self):
        # print('poprz ', self.tempTxt)
        # print('wybralem ', self.currentText())
        if self.tempTxt in self.dataInUse:
            self.dataInUse.remove(self.tempTxt)
            self.dataLeft.append(self.tempTxt)
        if self.currentText() in self.dataLeft:
            self.dataLeft.remove(self.currentText())
            self.dataInUse.append(self.currentText())
        self.tempTxt = self.currentText()
        # print('InUse 2 ', self.dataInUse)
        # print('Left 2 ', self.dataLeft)


if __name__ == "__main__":
    import sys

    db = blackjack.DataBase()
    print(blackjack.testPlayers())
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
